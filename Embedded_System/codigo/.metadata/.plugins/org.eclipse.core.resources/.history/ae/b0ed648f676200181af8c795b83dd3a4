/*
===============================================================================
 Name        : SmartWaste.c
 Author      : Diogo Dias
 Version     : Beta
 Description : main definition
===============================================================================
*/

#ifdef __USE_CMSIS
#include "LPC17xx.h"
#endif

#include <stdio.h>
#include <cr_section_macros.h>
#include "GPIO.h"
#include "SystemTick.h"
#include "TemperatureSensor.h"
#include "UltrasonicSensor.h"
#include "RTC.h"
#include "Timer.h"
#include "ExternalInterrupt.h"

#define ECHO_PIN 7
#define TRIGGER_PIN 8
#define TEMPERATURE_PIN 9
#define TEMPERATURE_CONVERSION 9
#define MAX_RECEIVE_SIGFOX_MESSAGE 10
#define MAX_TRANSMIT_SIGFOX_MESSAGE 12
#define WAIT_COVER_TIME 30 					//in seconds
#define ENABLE_CLOCK_POWER_TIMER0 1<<1
#define ENABLE_CLOCK_POWER_GPIO 1<<15

int waitForCoverToClose(){

	//start time
	TIMER0_SetCount(second);
	int initial = TIMER0_GetValue();

	//wait to bounce stabilize
	while(TIMER0_Elapse(initial)< 1);

	//wait to echo go low
	while(LPC_GPIO2->FIOPIN & (1 << WASTE_BIN_COVER))
		if(TIMER0_Elapse(initial)> WAIT_COVER_TIME){
			return 0;
	}
	return 1;
}

void getConfiguration(char * buffer, int length){
	//TODO
}

//12..(4 byte - lido temperatura com sucesso), (3 byte - temperatura), (2 byte - percentagem),(1 byte - tampa fechada),
void sendData(char * buffer, int length){
	//TODO
}

void writeToFile(char * file, int successOnReading, int temperature, int percentage, int isCover){
	FILE *f = fopen(file, "w");
	if (f == NULL){
		printf("Error opening file!\n");
		exit(1);
	}

	fprintf(f, "%s", "{successOnReading:");
	fprintf(f, "%d", successOnReading);
	fprintf(f, "%s", ",\ntemperature:");
	fprintf(f, "%d", temperature);
	fprintf(f, "%s", ",\npercentage:");
	fprintf(f, "%d", percentage);
	fprintf(f, "%s", ",\nisCover:");
	fprintf(f, "%d", isCover);
	fprintf(f, "%s", "}");

	fclose(f);
}

void compactInformation(char * file, int successOnReading, int temperature, int percentage, int isCover){
	file[0] = isCover;
	file[1] = percentage;
	file[2] = temperature;
	file[3] = successOnReading;
}

int readPercentageOfGarbage(int maxDistance){
	int	distance = UltrasonicSensor_getDistance();
	if(distance == -1 || distance > maxDistance){
		printf("\n Distância : %d", distance);
		return -1;
	}
	int percentage = distance * 100;
	percentage /= maxDistance;
	percentage = 100 - percentage;
	printf("\n Distância : %d", distance);
	return percentage;
}

void init(){
	//get value core clock
	SystemCoreClockUpdate();

	//only enable clock/power to TIMER0 and GPIO
	LPC_SC->PCONP = ENABLE_CLOCK_POWER_TIMER0 | ENABLE_CLOCK_POWER_GPIO;

	//enable external interrupt
	configureExternalInterrupt();

	//start UltrasonicSensor
	UltrasonicSensor_Init(TRIGGER_PIN, ECHO_PIN);

	//start TemperatureSensor
	TemperatureSensor_Init(TEMPERATURE_PIN, TEMPERATURE_CONVERSION, 1, 50);

	//start timer
	TIMER0_Init(second);

	RTCTime time;
	time.sec = 0;
	time.min = 0;
	time.hour = 0;
	time.Mday = 1;
	time.Wday = 0;
	time.Yday = 1;
	time.mon = 1;
	time.year = 2000;

	//start RTC
	RTC_Init();
	RTC_SetTime(&time);
	RTC_SetInterruptIncrement(ENABLE_INCREMENT_INTERRUPT_HOUR);
	RTC_EnableInterrupt();
	RTC_Start();
}

int main(void){
	init();

	char message [MAX_RECEIVE_SIGFOX_MESSAGE];
	getConfiguration(message, MAX_RECEIVE_SIGFOX_MESSAGE);

	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	//if started in configure mode, we will read the container length
	int maxDistance = UltrasonicSensor_getDistance();

	printf("\n Max Distance %d", maxDistance);

	int oldPercentage = -5;
	int coverClosed = 1;
	//char sendBuffer [MAX_TRANSMIT_SIGFOX_MESSAGE];

	while(1){
		int result = 1;
		int temperature = TemperatureSensor_GetTemperature(&result);
		int percentage = readPercentageOfGarbage(maxDistance);

		printf("\n Temperature: %d \n Percentage: %d \n -----------------------", temperature, percentage);

		//sendData(sendBuffer, MAX_TRANSMIT_SIGFOX_MESSAGE);

		//if one day has passed or the percentage of garbage grown up 5%, we notify the central server
		if(RTC_dayHasPassed() || percentage > oldPercentage + 4){
			if(coverClosed)	//!!!
				oldPercentage = percentage;
			writeToFile("file.txt", result, temperature, percentage, coverClosed);
		}

		//if nobody closed the cover, we will set a timer to wake up periodic
		if(!coverClosed)
			TIMER0_SetWait(second, 1);
		enableExternalInterrupt();

		__WFI();

		disableExternalInterrupt();
		TIMER0_Disable();

		coverClosed = waitForCoverToClose();
	}
}
